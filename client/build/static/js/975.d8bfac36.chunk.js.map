{"version":3,"file":"static/js/975.d8bfac36.chunk.js","mappings":"uLAuGA,UA7FgB,YACdA,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,sBACC,IAEH,IAAMC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,WAclD,OACE,UAAC,IAAD,CAAWI,OAAO,EAAMC,UAAU,eAAlC,WACE,iBAAKA,UAAU,cAAf,WACE,gBAAKA,UAAU,gCAAf,UACE,6CAEF,gBAAKA,UAAU,gCAAf,UACE,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,QAAf,UACE,kBAAOC,KAAK,OAAOD,UAAU,oBAE/B,gBAAKA,UAAU,QAAf,UACE,mBAAQA,UAAU,kBAAlB,4BAIN,gBAAKA,UAAU,0CAAf,UACE,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,QAAf,UACE,kBAAOA,UAAU,0BAEnB,gBAAKA,UAAU,QAAf,UACE,mBAAQA,UAAU,wBAAlB,+BAKR,gBAAKA,UAAU,cAAf,SACGL,GACCA,EAAQO,KAAI,SAACJ,GACX,IAAIK,EAAa,GAUjB,MAToB,QAAhBL,EAAKM,OACPD,EAAa,OACY,YAAhBL,EAAKM,OACdD,EAAa,UACY,aAAhBL,EAAKM,OACdD,EAAa,SACY,aAAhBL,EAAKM,SACdD,EAAa,YAGb,gBACEH,UAAU,yCADZ,UAIE,gBAAKA,UAAU,aAAf,UACE,iBAAKA,UAAU,YAAf,WACE,eAAIA,UAAU,oBAAd,SAAmCF,EAAKO,SACxC,cAAGL,UAAU,oBAAb,SAAkCF,EAAKQ,QACvC,eAAGN,UAAU,4BAAb,WACE,SAAC,MAAD,IAAsB,IACrB,IAAIO,KAAKT,EAAKU,WAAWC,gBAC1B,cAAGT,UAAU,6BAAb,UACE,SAAC,MAAD,CACEU,QAAS,kBA5DbC,EA4D8Bb,EAAKc,IA5D/BR,EA4DoCN,EAAKM,YA3D/DS,EAAAA,EAAAA,WAAyBF,EAAIP,GAAQU,MAAK,WACxCpB,EAAAA,EAAAA,uBAFe,IAACiB,EAAIP,QA+DJ,cAAGJ,UAAU,4BAAb,UACE,SAAC,MAAD,CAAiBU,QAAS,kBAtE5BC,EAsE6Cb,EAAKc,SArEpEC,EAAAA,EAAAA,WAAyBF,GAAIG,MAAK,WAChCpB,EAAAA,EAAAA,uBAFe,IAACiB,QAwEA,cAAGX,UAAS,6BAAwBG,GAApC,SACGL,EAAKM,kBAlBTN,EAAKc,e,0ECpEpBC,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAuCH,OAvCGA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,aAAAA,MACJ,SAAkBF,GAChB,OAAOI,IAAAA,KAAU,CACfV,MAAO,gBACPW,KAAM,oCACNC,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,oBAClBP,MAAK,SAACQ,GACP,GAAIA,EAAOC,YACT,OAAO7B,EAAAA,EAAAA,kBAA6BiB,GAAIG,MAAK,SAACQ,GACxCA,GACFP,IAAAA,KAAU,WAAY,8BAA+B,mBAK9D,wBAED,SAAkBJ,EAAIP,GACpB,OAAOW,IAAAA,KAAU,CACfV,MAAO,gBACPmB,MAAO,SACPC,aAAc,CACZC,IAAK,MACLC,SAAU,WACVC,QAAS,UACTC,SAAU,YAEZC,WAAY1B,IACXU,MAAK,SAACQ,GACP,GAAIA,EACF,OAAO5B,EAAAA,EAAAA,kBAA6BiB,EAAIW,EAAOS,OAAOjB,MAAK,SAACkB,GAC1D,OAAOA,YAId,EAvCGnB,GA0CN","sources":["components/AllTask/AllTask.jsx","helper/AleartMessage.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport {\r\n  AiOutlineCalendar,\r\n  AiOutlineDelete,\r\n  AiOutlineEdit,\r\n} from \"react-icons/ai\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ApiRequest from \"../../APIRequest/ApiRequest\";\r\nimport AleartMessage from \"../../helper/AleartMessage\";\r\nconst AllTask = () => {\r\n  useEffect(() => {\r\n    ApiRequest.SetAllTaskRequest();\r\n  }, []);\r\n\r\n  const allTask = useSelector((state) => state.task.allTask);\r\n\r\n  const deleteTask = (id) => {\r\n    AleartMessage.deleteTask(id).then(() => {\r\n      ApiRequest.SetAllTaskRequest();\r\n    });\r\n  };\r\n\r\n  const updateTask = (id, status) => {\r\n    AleartMessage.updateTask(id, status).then(() => {\r\n      ApiRequest.SetAllTaskRequest();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container fluid={true} className=\"content-body\">\r\n      <div className=\"row p-0 m-0\">\r\n        <div className=\"col-12 col-md-3 col-lg-3 px-3\">\r\n          <h5>Task Canceled</h5>\r\n        </div>\r\n        <div className=\"col-12 col-md-3 col-lg-5 px-3\">\r\n          <div className=\"row\">\r\n            <div className=\"col-8\">\r\n              <input type=\"date\" className=\"form-control\" />\r\n            </div>\r\n            <div className=\"col-4\">\r\n              <button className=\"btn btn-primary\">Search</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-12 float-end col-md-4 col-lg-4 px-2\">\r\n          <div className=\"row\">\r\n            <div className=\"col-8\">\r\n              <input className=\"form-control w-100\" />\r\n            </div>\r\n            <div className=\"col-4\">\r\n              <button className=\"btn btn-primary w-100\">Search</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row p-0 m-0\">\r\n        {allTask &&\r\n          allTask.map((task) => {\r\n            let badgeColor = \"\";\r\n            if (task.status === \"new\") {\r\n              badgeColor = \"info\";\r\n            } else if (task.status === \"pending\") {\r\n              badgeColor = \"primary\";\r\n            } else if (task.status === \"canceled\") {\r\n              badgeColor = \"danger\";\r\n            } else if (task.status === \"complate\") {\r\n              badgeColor = \"success\";\r\n            }\r\n            return (\r\n              <div\r\n                className=\"col-12 col-lg-4 col-sm-6 col-md-4  p-2\"\r\n                key={task._id}\r\n              >\r\n                <div className=\"card h-100\">\r\n                  <div className=\"card-body\">\r\n                    <h6 className=\"animated fadeInUp\">{task.title}</h6>\r\n                    <p className=\"animated fadeInUp\">{task.body}</p>\r\n                    <p className=\"m-0 animated fadeInUp p-0\">\r\n                      <AiOutlineCalendar />{\" \"}\r\n                      {new Date(task.createdAt).toDateString()}\r\n                      <a className=\"icon-nav text-primary mx-1\">\r\n                        <AiOutlineEdit\r\n                          onClick={() => updateTask(task._id, task.status)}\r\n                        />\r\n                      </a>\r\n                      <a className=\"icon-nav text-danger mx-1\">\r\n                        <AiOutlineDelete onClick={() => deleteTask(task._id)} />\r\n                      </a>\r\n                      <a className={`badge float-end bg-${badgeColor}`}>\r\n                        {task.status}\r\n                      </a>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AllTask;\r\n","//external import\r\nimport Swal from \"sweetalert2\";\r\nimport ApiRequest from \"../APIRequest/ApiRequest\";\r\n\r\nclass AleartMessage {\r\n  static deleteTask(id) {\r\n    return Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        return ApiRequest.deleteTaskRequest(id).then((result) => {\r\n          if (result) {\r\n            Swal.fire(\"Deleted!\", \"Your file has been deleted.\", \"success\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  static updateTask(id, status) {\r\n    return Swal.fire({\r\n      title: \"Change Status\",\r\n      input: \"select\",\r\n      inputOptions: {\r\n        new: \"New\",\r\n        complate: \"Complate\",\r\n        pending: \"Pending\",\r\n        canceled: \"Canceled\",\r\n      },\r\n      inputValue: status,\r\n    }).then((result) => {\r\n      if (result) {\r\n        return ApiRequest.updateTaskRequest(id, result.value).then((res) => {\r\n          return res;\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default AleartMessage;\r\n"],"names":["useEffect","ApiRequest","allTask","useSelector","state","task","fluid","className","type","map","badgeColor","status","title","body","Date","createdAt","toDateString","onClick","id","_id","AleartMessage","then","Swal","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","isConfirmed","input","inputOptions","new","complate","pending","canceled","inputValue","value","res"],"sourceRoot":""}